// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: device_sync/group_backup.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Definitions for backups

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Group membership state
public enum Xmtp_DeviceSync_GroupBackup_GroupMembershipStateSave: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case allowed // = 1
  case rejected // = 2
  case pending // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .allowed
    case 2: self = .rejected
    case 3: self = .pending
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .allowed: return 1
    case .rejected: return 2
    case .pending: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Xmtp_DeviceSync_GroupBackup_GroupMembershipStateSave] = [
    .unspecified,
    .allowed,
    .rejected,
    .pending,
  ]

}

/// Conversation type
public enum Xmtp_DeviceSync_GroupBackup_ConversationTypeSave: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case group // = 1
  case dm // = 2
  case sync // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .group
    case 2: self = .dm
    case 3: self = .sync
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .group: return 1
    case .dm: return 2
    case .sync: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Xmtp_DeviceSync_GroupBackup_ConversationTypeSave] = [
    .unspecified,
    .group,
    .dm,
    .sync,
  ]

}

/// Proto representation of a stored group
public struct Xmtp_DeviceSync_GroupBackup_GroupSave: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Data = Data()

  public var createdAtNs: Int64 = 0

  public var membershipState: Xmtp_DeviceSync_GroupBackup_GroupMembershipStateSave = .unspecified

  public var installationsLastChecked: Int64 = 0

  public var addedByInboxID: String = String()

  public var welcomeID: Int64 {
    get {return _welcomeID ?? 0}
    set {_welcomeID = newValue}
  }
  /// Returns true if `welcomeID` has been explicitly set.
  public var hasWelcomeID: Bool {return self._welcomeID != nil}
  /// Clears the value of `welcomeID`. Subsequent reads from it will return its default value.
  public mutating func clearWelcomeID() {self._welcomeID = nil}

  public var rotatedAtNs: Int64 = 0

  public var conversationType: Xmtp_DeviceSync_GroupBackup_ConversationTypeSave = .unspecified

  public var dmID: String {
    get {return _dmID ?? String()}
    set {_dmID = newValue}
  }
  /// Returns true if `dmID` has been explicitly set.
  public var hasDmID: Bool {return self._dmID != nil}
  /// Clears the value of `dmID`. Subsequent reads from it will return its default value.
  public mutating func clearDmID() {self._dmID = nil}

  public var lastMessageNs: Int64 {
    get {return _lastMessageNs ?? 0}
    set {_lastMessageNs = newValue}
  }
  /// Returns true if `lastMessageNs` has been explicitly set.
  public var hasLastMessageNs: Bool {return self._lastMessageNs != nil}
  /// Clears the value of `lastMessageNs`. Subsequent reads from it will return its default value.
  public mutating func clearLastMessageNs() {self._lastMessageNs = nil}

  public var messageDisappearFromNs: Int64 {
    get {return _messageDisappearFromNs ?? 0}
    set {_messageDisappearFromNs = newValue}
  }
  /// Returns true if `messageDisappearFromNs` has been explicitly set.
  public var hasMessageDisappearFromNs: Bool {return self._messageDisappearFromNs != nil}
  /// Clears the value of `messageDisappearFromNs`. Subsequent reads from it will return its default value.
  public mutating func clearMessageDisappearFromNs() {self._messageDisappearFromNs = nil}

  public var messageDisappearInNs: Int64 {
    get {return _messageDisappearInNs ?? 0}
    set {_messageDisappearInNs = newValue}
  }
  /// Returns true if `messageDisappearInNs` has been explicitly set.
  public var hasMessageDisappearInNs: Bool {return self._messageDisappearInNs != nil}
  /// Clears the value of `messageDisappearInNs`. Subsequent reads from it will return its default value.
  public mutating func clearMessageDisappearInNs() {self._messageDisappearInNs = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _welcomeID: Int64? = nil
  fileprivate var _dmID: String? = nil
  fileprivate var _lastMessageNs: Int64? = nil
  fileprivate var _messageDisappearFromNs: Int64? = nil
  fileprivate var _messageDisappearInNs: Int64? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.device_sync.group_backup"

extension Xmtp_DeviceSync_GroupBackup_GroupMembershipStateSave: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GROUP_MEMBERSHIP_STATE_SAVE_UNSPECIFIED"),
    1: .same(proto: "GROUP_MEMBERSHIP_STATE_SAVE_ALLOWED"),
    2: .same(proto: "GROUP_MEMBERSHIP_STATE_SAVE_REJECTED"),
    3: .same(proto: "GROUP_MEMBERSHIP_STATE_SAVE_PENDING"),
  ]
}

extension Xmtp_DeviceSync_GroupBackup_ConversationTypeSave: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONVERSATION_TYPE_SAVE_UNSPECIFIED"),
    1: .same(proto: "CONVERSATION_TYPE_SAVE_GROUP"),
    2: .same(proto: "CONVERSATION_TYPE_SAVE_DM"),
    3: .same(proto: "CONVERSATION_TYPE_SAVE_SYNC"),
  ]
}

extension Xmtp_DeviceSync_GroupBackup_GroupSave: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupSave"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "created_at_ns"),
    3: .standard(proto: "membership_state"),
    4: .standard(proto: "installations_last_checked"),
    5: .standard(proto: "added_by_inbox_id"),
    6: .standard(proto: "welcome_id"),
    7: .standard(proto: "rotated_at_ns"),
    8: .standard(proto: "conversation_type"),
    9: .standard(proto: "dm_id"),
    10: .standard(proto: "last_message_ns"),
    11: .standard(proto: "message_disappear_from_ns"),
    12: .standard(proto: "message_disappear_in_ns"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.createdAtNs) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.membershipState) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.installationsLastChecked) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.addedByInboxID) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self._welcomeID) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.rotatedAtNs) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.conversationType) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._dmID) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self._lastMessageNs) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self._messageDisappearFromNs) }()
      case 12: try { try decoder.decodeSingularInt64Field(value: &self._messageDisappearInNs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if self.createdAtNs != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAtNs, fieldNumber: 2)
    }
    if self.membershipState != .unspecified {
      try visitor.visitSingularEnumField(value: self.membershipState, fieldNumber: 3)
    }
    if self.installationsLastChecked != 0 {
      try visitor.visitSingularInt64Field(value: self.installationsLastChecked, fieldNumber: 4)
    }
    if !self.addedByInboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.addedByInboxID, fieldNumber: 5)
    }
    try { if let v = self._welcomeID {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
    } }()
    if self.rotatedAtNs != 0 {
      try visitor.visitSingularInt64Field(value: self.rotatedAtNs, fieldNumber: 7)
    }
    if self.conversationType != .unspecified {
      try visitor.visitSingularEnumField(value: self.conversationType, fieldNumber: 8)
    }
    try { if let v = self._dmID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._lastMessageNs {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._messageDisappearFromNs {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._messageDisappearInNs {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_DeviceSync_GroupBackup_GroupSave, rhs: Xmtp_DeviceSync_GroupBackup_GroupSave) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.createdAtNs != rhs.createdAtNs {return false}
    if lhs.membershipState != rhs.membershipState {return false}
    if lhs.installationsLastChecked != rhs.installationsLastChecked {return false}
    if lhs.addedByInboxID != rhs.addedByInboxID {return false}
    if lhs._welcomeID != rhs._welcomeID {return false}
    if lhs.rotatedAtNs != rhs.rotatedAtNs {return false}
    if lhs.conversationType != rhs.conversationType {return false}
    if lhs._dmID != rhs._dmID {return false}
    if lhs._lastMessageNs != rhs._lastMessageNs {return false}
    if lhs._messageDisappearFromNs != rhs._messageDisappearFromNs {return false}
    if lhs._messageDisappearInNs != rhs._messageDisappearInNs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
