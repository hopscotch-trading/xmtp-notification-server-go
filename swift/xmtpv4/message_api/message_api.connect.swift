// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: xmtpv4/message_api/message_api.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Xmtp_Xmtpv4_MessageApi_ReplicationApiClientInterface: Sendable {

    func `subscribeEnvelopes`(headers: Connect.Headers, onResult: @escaping @Sendable (Connect.StreamResult<Xmtp_Xmtpv4_MessageApi_SubscribeEnvelopesResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Xmtp_Xmtpv4_MessageApi_SubscribeEnvelopesRequest>

    @available(iOS 13, *)
    func `subscribeEnvelopes`(headers: Connect.Headers) -> any Connect.ServerOnlyAsyncStreamInterface<Xmtp_Xmtpv4_MessageApi_SubscribeEnvelopesRequest, Xmtp_Xmtpv4_MessageApi_SubscribeEnvelopesResponse>

    @discardableResult
    func `queryEnvelopes`(request: Xmtp_Xmtpv4_MessageApi_QueryEnvelopesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Xmtp_Xmtpv4_MessageApi_QueryEnvelopesResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `queryEnvelopes`(request: Xmtp_Xmtpv4_MessageApi_QueryEnvelopesRequest, headers: Connect.Headers) async -> ResponseMessage<Xmtp_Xmtpv4_MessageApi_QueryEnvelopesResponse>

    @discardableResult
    func `publishPayerEnvelopes`(request: Xmtp_Xmtpv4_MessageApi_PublishPayerEnvelopesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Xmtp_Xmtpv4_MessageApi_PublishPayerEnvelopesResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `publishPayerEnvelopes`(request: Xmtp_Xmtpv4_MessageApi_PublishPayerEnvelopesRequest, headers: Connect.Headers) async -> ResponseMessage<Xmtp_Xmtpv4_MessageApi_PublishPayerEnvelopesResponse>

    @discardableResult
    func `getInboxIds`(request: Xmtp_Xmtpv4_MessageApi_GetInboxIdsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Xmtp_Xmtpv4_MessageApi_GetInboxIdsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getInboxIds`(request: Xmtp_Xmtpv4_MessageApi_GetInboxIdsRequest, headers: Connect.Headers) async -> ResponseMessage<Xmtp_Xmtpv4_MessageApi_GetInboxIdsResponse>
}

/// Concrete implementation of `Xmtp_Xmtpv4_MessageApi_ReplicationApiClientInterface`.
public final class Xmtp_Xmtpv4_MessageApi_ReplicationApiClient: Xmtp_Xmtpv4_MessageApi_ReplicationApiClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    public func `subscribeEnvelopes`(headers: Connect.Headers = [:], onResult: @escaping @Sendable (Connect.StreamResult<Xmtp_Xmtpv4_MessageApi_SubscribeEnvelopesResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Xmtp_Xmtpv4_MessageApi_SubscribeEnvelopesRequest> {
        return self.client.serverOnlyStream(path: "/xmtp.xmtpv4.message_api.ReplicationApi/SubscribeEnvelopes", headers: headers, onResult: onResult)
    }

    @available(iOS 13, *)
    public func `subscribeEnvelopes`(headers: Connect.Headers = [:]) -> any Connect.ServerOnlyAsyncStreamInterface<Xmtp_Xmtpv4_MessageApi_SubscribeEnvelopesRequest, Xmtp_Xmtpv4_MessageApi_SubscribeEnvelopesResponse> {
        return self.client.serverOnlyStream(path: "/xmtp.xmtpv4.message_api.ReplicationApi/SubscribeEnvelopes", headers: headers)
    }

    @discardableResult
    public func `queryEnvelopes`(request: Xmtp_Xmtpv4_MessageApi_QueryEnvelopesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Xmtp_Xmtpv4_MessageApi_QueryEnvelopesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/xmtp.xmtpv4.message_api.ReplicationApi/QueryEnvelopes", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `queryEnvelopes`(request: Xmtp_Xmtpv4_MessageApi_QueryEnvelopesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Xmtp_Xmtpv4_MessageApi_QueryEnvelopesResponse> {
        return await self.client.unary(path: "/xmtp.xmtpv4.message_api.ReplicationApi/QueryEnvelopes", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `publishPayerEnvelopes`(request: Xmtp_Xmtpv4_MessageApi_PublishPayerEnvelopesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Xmtp_Xmtpv4_MessageApi_PublishPayerEnvelopesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/xmtp.xmtpv4.message_api.ReplicationApi/PublishPayerEnvelopes", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `publishPayerEnvelopes`(request: Xmtp_Xmtpv4_MessageApi_PublishPayerEnvelopesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Xmtp_Xmtpv4_MessageApi_PublishPayerEnvelopesResponse> {
        return await self.client.unary(path: "/xmtp.xmtpv4.message_api.ReplicationApi/PublishPayerEnvelopes", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getInboxIds`(request: Xmtp_Xmtpv4_MessageApi_GetInboxIdsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Xmtp_Xmtpv4_MessageApi_GetInboxIdsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/xmtp.xmtpv4.message_api.ReplicationApi/GetInboxIds", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getInboxIds`(request: Xmtp_Xmtpv4_MessageApi_GetInboxIdsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Xmtp_Xmtpv4_MessageApi_GetInboxIdsResponse> {
        return await self.client.unary(path: "/xmtp.xmtpv4.message_api.ReplicationApi/GetInboxIds", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let subscribeEnvelopes = Connect.MethodSpec(name: "SubscribeEnvelopes", service: "xmtp.xmtpv4.message_api.ReplicationApi", type: .serverStream)
            public static let queryEnvelopes = Connect.MethodSpec(name: "QueryEnvelopes", service: "xmtp.xmtpv4.message_api.ReplicationApi", type: .unary)
            public static let publishPayerEnvelopes = Connect.MethodSpec(name: "PublishPayerEnvelopes", service: "xmtp.xmtpv4.message_api.ReplicationApi", type: .unary)
            public static let getInboxIds = Connect.MethodSpec(name: "GetInboxIds", service: "xmtp.xmtpv4.message_api.ReplicationApi", type: .unary)
        }
    }
}
