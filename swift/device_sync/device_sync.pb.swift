// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: device_sync/device_sync.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Definitions for backups

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Elements selected for backup
public enum Xmtp_DeviceSync_BackupElementSelection: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case messages // = 1
  case consent // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .messages
    case 2: self = .consent
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .messages: return 1
    case .consent: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Xmtp_DeviceSync_BackupElementSelection] = [
    .unspecified,
    .messages,
    .consent,
  ]

}

/// Union type representing everything that can be serialied and saved in a backup archive.
public struct Xmtp_DeviceSync_BackupElement: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var element: Xmtp_DeviceSync_BackupElement.OneOf_Element? = nil

  public var metadata: Xmtp_DeviceSync_BackupMetadataSave {
    get {
      if case .metadata(let v)? = element {return v}
      return Xmtp_DeviceSync_BackupMetadataSave()
    }
    set {element = .metadata(newValue)}
  }

  public var group: Xmtp_DeviceSync_GroupBackup_GroupSave {
    get {
      if case .group(let v)? = element {return v}
      return Xmtp_DeviceSync_GroupBackup_GroupSave()
    }
    set {element = .group(newValue)}
  }

  public var groupMessage: Xmtp_DeviceSync_MessageBackup_GroupMessageSave {
    get {
      if case .groupMessage(let v)? = element {return v}
      return Xmtp_DeviceSync_MessageBackup_GroupMessageSave()
    }
    set {element = .groupMessage(newValue)}
  }

  public var consent: Xmtp_DeviceSync_ConsentBackup_ConsentSave {
    get {
      if case .consent(let v)? = element {return v}
      return Xmtp_DeviceSync_ConsentBackup_ConsentSave()
    }
    set {element = .consent(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Element: Equatable, Sendable {
    case metadata(Xmtp_DeviceSync_BackupMetadataSave)
    case group(Xmtp_DeviceSync_GroupBackup_GroupSave)
    case groupMessage(Xmtp_DeviceSync_MessageBackup_GroupMessageSave)
    case consent(Xmtp_DeviceSync_ConsentBackup_ConsentSave)

  }

  public init() {}
}

/// Proto representation of backup metadata
/// (Backup version is explicitly missing - it's stored as a header.)
public struct Xmtp_DeviceSync_BackupMetadataSave: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var elements: [Xmtp_DeviceSync_BackupElementSelection] = []

  public var exportedAtNs: Int64 = 0

  public var startNs: Int64 {
    get {return _startNs ?? 0}
    set {_startNs = newValue}
  }
  /// Returns true if `startNs` has been explicitly set.
  public var hasStartNs: Bool {return self._startNs != nil}
  /// Clears the value of `startNs`. Subsequent reads from it will return its default value.
  public mutating func clearStartNs() {self._startNs = nil}

  public var endNs: Int64 {
    get {return _endNs ?? 0}
    set {_endNs = newValue}
  }
  /// Returns true if `endNs` has been explicitly set.
  public var hasEndNs: Bool {return self._endNs != nil}
  /// Clears the value of `endNs`. Subsequent reads from it will return its default value.
  public mutating func clearEndNs() {self._endNs = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startNs: Int64? = nil
  fileprivate var _endNs: Int64? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.device_sync"

extension Xmtp_DeviceSync_BackupElementSelection: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BACKUP_ELEMENT_SELECTION_UNSPECIFIED"),
    1: .same(proto: "BACKUP_ELEMENT_SELECTION_MESSAGES"),
    2: .same(proto: "BACKUP_ELEMENT_SELECTION_CONSENT"),
  ]
}

extension Xmtp_DeviceSync_BackupElement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BackupElement"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "group"),
    3: .standard(proto: "group_message"),
    4: .same(proto: "consent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Xmtp_DeviceSync_BackupMetadataSave?
        var hadOneofValue = false
        if let current = self.element {
          hadOneofValue = true
          if case .metadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.element = .metadata(v)
        }
      }()
      case 2: try {
        var v: Xmtp_DeviceSync_GroupBackup_GroupSave?
        var hadOneofValue = false
        if let current = self.element {
          hadOneofValue = true
          if case .group(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.element = .group(v)
        }
      }()
      case 3: try {
        var v: Xmtp_DeviceSync_MessageBackup_GroupMessageSave?
        var hadOneofValue = false
        if let current = self.element {
          hadOneofValue = true
          if case .groupMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.element = .groupMessage(v)
        }
      }()
      case 4: try {
        var v: Xmtp_DeviceSync_ConsentBackup_ConsentSave?
        var hadOneofValue = false
        if let current = self.element {
          hadOneofValue = true
          if case .consent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.element = .consent(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.element {
    case .metadata?: try {
      guard case .metadata(let v)? = self.element else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .group?: try {
      guard case .group(let v)? = self.element else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .groupMessage?: try {
      guard case .groupMessage(let v)? = self.element else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .consent?: try {
      guard case .consent(let v)? = self.element else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_DeviceSync_BackupElement, rhs: Xmtp_DeviceSync_BackupElement) -> Bool {
    if lhs.element != rhs.element {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_DeviceSync_BackupMetadataSave: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BackupMetadataSave"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "elements"),
    3: .standard(proto: "exported_at_ns"),
    4: .standard(proto: "start_ns"),
    5: .standard(proto: "end_ns"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.elements) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.exportedAtNs) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self._startNs) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self._endNs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.elements.isEmpty {
      try visitor.visitPackedEnumField(value: self.elements, fieldNumber: 2)
    }
    if self.exportedAtNs != 0 {
      try visitor.visitSingularInt64Field(value: self.exportedAtNs, fieldNumber: 3)
    }
    try { if let v = self._startNs {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._endNs {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_DeviceSync_BackupMetadataSave, rhs: Xmtp_DeviceSync_BackupMetadataSave) -> Bool {
    if lhs.elements != rhs.elements {return false}
    if lhs.exportedAtNs != rhs.exportedAtNs {return false}
    if lhs._startNs != rhs._startNs {return false}
    if lhs._endNs != rhs._endNs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
