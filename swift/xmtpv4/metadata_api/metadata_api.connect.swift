// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: xmtpv4/metadata_api/metadata_api.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// Metadata for distributed tracing, debugging and synchronization
public protocol Xmtp_Xmtpv4_MetadataApi_MetadataApiClientInterface: Sendable {

    @discardableResult
    func `getSyncCursor`(request: Xmtp_Xmtpv4_MetadataApi_GetSyncCursorRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Xmtp_Xmtpv4_MetadataApi_GetSyncCursorResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getSyncCursor`(request: Xmtp_Xmtpv4_MetadataApi_GetSyncCursorRequest, headers: Connect.Headers) async -> ResponseMessage<Xmtp_Xmtpv4_MetadataApi_GetSyncCursorResponse>

    func `subscribeSyncCursor`(headers: Connect.Headers, onResult: @escaping @Sendable (Connect.StreamResult<Xmtp_Xmtpv4_MetadataApi_GetSyncCursorResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Xmtp_Xmtpv4_MetadataApi_GetSyncCursorRequest>

    @available(iOS 13, *)
    func `subscribeSyncCursor`(headers: Connect.Headers) -> any Connect.ServerOnlyAsyncStreamInterface<Xmtp_Xmtpv4_MetadataApi_GetSyncCursorRequest, Xmtp_Xmtpv4_MetadataApi_GetSyncCursorResponse>
}

/// Concrete implementation of `Xmtp_Xmtpv4_MetadataApi_MetadataApiClientInterface`.
public final class Xmtp_Xmtpv4_MetadataApi_MetadataApiClient: Xmtp_Xmtpv4_MetadataApi_MetadataApiClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `getSyncCursor`(request: Xmtp_Xmtpv4_MetadataApi_GetSyncCursorRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Xmtp_Xmtpv4_MetadataApi_GetSyncCursorResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/xmtp.xmtpv4.metadata_api.MetadataApi/GetSyncCursor", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getSyncCursor`(request: Xmtp_Xmtpv4_MetadataApi_GetSyncCursorRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Xmtp_Xmtpv4_MetadataApi_GetSyncCursorResponse> {
        return await self.client.unary(path: "/xmtp.xmtpv4.metadata_api.MetadataApi/GetSyncCursor", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public func `subscribeSyncCursor`(headers: Connect.Headers = [:], onResult: @escaping @Sendable (Connect.StreamResult<Xmtp_Xmtpv4_MetadataApi_GetSyncCursorResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Xmtp_Xmtpv4_MetadataApi_GetSyncCursorRequest> {
        return self.client.serverOnlyStream(path: "/xmtp.xmtpv4.metadata_api.MetadataApi/SubscribeSyncCursor", headers: headers, onResult: onResult)
    }

    @available(iOS 13, *)
    public func `subscribeSyncCursor`(headers: Connect.Headers = [:]) -> any Connect.ServerOnlyAsyncStreamInterface<Xmtp_Xmtpv4_MetadataApi_GetSyncCursorRequest, Xmtp_Xmtpv4_MetadataApi_GetSyncCursorResponse> {
        return self.client.serverOnlyStream(path: "/xmtp.xmtpv4.metadata_api.MetadataApi/SubscribeSyncCursor", headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let getSyncCursor = Connect.MethodSpec(name: "GetSyncCursor", service: "xmtp.xmtpv4.metadata_api.MetadataApi", type: .unary)
            public static let subscribeSyncCursor = Connect.MethodSpec(name: "SubscribeSyncCursor", service: "xmtp.xmtpv4.metadata_api.MetadataApi", type: .serverStream)
        }
    }
}
