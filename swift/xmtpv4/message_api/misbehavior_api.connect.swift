// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: xmtpv4/message_api/misbehavior_api.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Xmtp_Xmtpv4_MessageApi_MisbehaviorApiClientInterface: Sendable {

    @discardableResult
    func `submitMisbehaviorReport`(request: Xmtp_Xmtpv4_MessageApi_SubmitMisbehaviorReportRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Xmtp_Xmtpv4_MessageApi_SubmitMisbehaviorReportResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `submitMisbehaviorReport`(request: Xmtp_Xmtpv4_MessageApi_SubmitMisbehaviorReportRequest, headers: Connect.Headers) async -> ResponseMessage<Xmtp_Xmtpv4_MessageApi_SubmitMisbehaviorReportResponse>

    @discardableResult
    func `queryMisbehaviorReports`(request: Xmtp_Xmtpv4_MessageApi_QueryMisbehaviorReportsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Xmtp_Xmtpv4_MessageApi_QueryMisbehaviorReportsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `queryMisbehaviorReports`(request: Xmtp_Xmtpv4_MessageApi_QueryMisbehaviorReportsRequest, headers: Connect.Headers) async -> ResponseMessage<Xmtp_Xmtpv4_MessageApi_QueryMisbehaviorReportsResponse>
}

/// Concrete implementation of `Xmtp_Xmtpv4_MessageApi_MisbehaviorApiClientInterface`.
public final class Xmtp_Xmtpv4_MessageApi_MisbehaviorApiClient: Xmtp_Xmtpv4_MessageApi_MisbehaviorApiClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `submitMisbehaviorReport`(request: Xmtp_Xmtpv4_MessageApi_SubmitMisbehaviorReportRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Xmtp_Xmtpv4_MessageApi_SubmitMisbehaviorReportResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/xmtp.xmtpv4.message_api.MisbehaviorApi/SubmitMisbehaviorReport", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `submitMisbehaviorReport`(request: Xmtp_Xmtpv4_MessageApi_SubmitMisbehaviorReportRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Xmtp_Xmtpv4_MessageApi_SubmitMisbehaviorReportResponse> {
        return await self.client.unary(path: "/xmtp.xmtpv4.message_api.MisbehaviorApi/SubmitMisbehaviorReport", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `queryMisbehaviorReports`(request: Xmtp_Xmtpv4_MessageApi_QueryMisbehaviorReportsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Xmtp_Xmtpv4_MessageApi_QueryMisbehaviorReportsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/xmtp.xmtpv4.message_api.MisbehaviorApi/QueryMisbehaviorReports", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `queryMisbehaviorReports`(request: Xmtp_Xmtpv4_MessageApi_QueryMisbehaviorReportsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Xmtp_Xmtpv4_MessageApi_QueryMisbehaviorReportsResponse> {
        return await self.client.unary(path: "/xmtp.xmtpv4.message_api.MisbehaviorApi/QueryMisbehaviorReports", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let submitMisbehaviorReport = Connect.MethodSpec(name: "SubmitMisbehaviorReport", service: "xmtp.xmtpv4.message_api.MisbehaviorApi", type: .unary)
            public static let queryMisbehaviorReports = Connect.MethodSpec(name: "QueryMisbehaviorReports", service: "xmtp.xmtpv4.message_api.MisbehaviorApi", type: .unary)
        }
    }
}
