// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: device_sync/message_backup.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Definitions for backups

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Group message kind
public enum Xmtp_DeviceSync_MessageBackup_GroupMessageKindSave: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case application // = 1
  case membershipChange // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .application
    case 2: self = .membershipChange
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .application: return 1
    case .membershipChange: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Xmtp_DeviceSync_MessageBackup_GroupMessageKindSave] = [
    .unspecified,
    .application,
    .membershipChange,
  ]

}

/// Group message delivery status
public enum Xmtp_DeviceSync_MessageBackup_DeliveryStatusSave: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case unpublished // = 1
  case published // = 2
  case failed // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .unpublished
    case 2: self = .published
    case 3: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .unpublished: return 1
    case .published: return 2
    case .failed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Xmtp_DeviceSync_MessageBackup_DeliveryStatusSave] = [
    .unspecified,
    .unpublished,
    .published,
    .failed,
  ]

}

/// Group message content type
public enum Xmtp_DeviceSync_MessageBackup_ContentTypeSave: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case unknown // = 1
  case text // = 2
  case groupMembershipChange // = 3
  case groupUpdated // = 4
  case reaction // = 5
  case readReceipt // = 6
  case reply // = 7
  case attachment // = 8
  case remoteAttachment // = 9
  case transactionReference // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .unknown
    case 2: self = .text
    case 3: self = .groupMembershipChange
    case 4: self = .groupUpdated
    case 5: self = .reaction
    case 6: self = .readReceipt
    case 7: self = .reply
    case 8: self = .attachment
    case 9: self = .remoteAttachment
    case 10: self = .transactionReference
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .unknown: return 1
    case .text: return 2
    case .groupMembershipChange: return 3
    case .groupUpdated: return 4
    case .reaction: return 5
    case .readReceipt: return 6
    case .reply: return 7
    case .attachment: return 8
    case .remoteAttachment: return 9
    case .transactionReference: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Xmtp_DeviceSync_MessageBackup_ContentTypeSave] = [
    .unspecified,
    .unknown,
    .text,
    .groupMembershipChange,
    .groupUpdated,
    .reaction,
    .readReceipt,
    .reply,
    .attachment,
    .remoteAttachment,
    .transactionReference,
  ]

}

/// Proto representation of a stored group message
public struct Xmtp_DeviceSync_MessageBackup_GroupMessageSave: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Data = Data()

  public var groupID: Data = Data()

  public var decryptedMessageBytes: Data = Data()

  public var sentAtNs: Int64 = 0

  public var kind: Xmtp_DeviceSync_MessageBackup_GroupMessageKindSave = .unspecified

  public var senderInstallationID: Data = Data()

  public var senderInboxID: String = String()

  public var deliveryStatus: Xmtp_DeviceSync_MessageBackup_DeliveryStatusSave = .unspecified

  public var contentType: Xmtp_DeviceSync_MessageBackup_ContentTypeSave = .unspecified

  public var versionMajor: Int32 = 0

  public var versionMinor: Int32 = 0

  public var authorityID: String = String()

  public var referenceID: Data {
    get {return _referenceID ?? Data()}
    set {_referenceID = newValue}
  }
  /// Returns true if `referenceID` has been explicitly set.
  public var hasReferenceID: Bool {return self._referenceID != nil}
  /// Clears the value of `referenceID`. Subsequent reads from it will return its default value.
  public mutating func clearReferenceID() {self._referenceID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _referenceID: Data? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.device_sync.message_backup"

extension Xmtp_DeviceSync_MessageBackup_GroupMessageKindSave: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GROUP_MESSAGE_KIND_SAVE_UNSPECIFIED"),
    1: .same(proto: "GROUP_MESSAGE_KIND_SAVE_APPLICATION"),
    2: .same(proto: "GROUP_MESSAGE_KIND_SAVE_MEMBERSHIP_CHANGE"),
  ]
}

extension Xmtp_DeviceSync_MessageBackup_DeliveryStatusSave: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DELIVERY_STATUS_SAVE_UNSPECIFIED"),
    1: .same(proto: "DELIVERY_STATUS_SAVE_UNPUBLISHED"),
    2: .same(proto: "DELIVERY_STATUS_SAVE_PUBLISHED"),
    3: .same(proto: "DELIVERY_STATUS_SAVE_FAILED"),
  ]
}

extension Xmtp_DeviceSync_MessageBackup_ContentTypeSave: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONTENT_TYPE_SAVE_UNSPECIFIED"),
    1: .same(proto: "CONTENT_TYPE_SAVE_UNKNOWN"),
    2: .same(proto: "CONTENT_TYPE_SAVE_TEXT"),
    3: .same(proto: "CONTENT_TYPE_SAVE_GROUP_MEMBERSHIP_CHANGE"),
    4: .same(proto: "CONTENT_TYPE_SAVE_GROUP_UPDATED"),
    5: .same(proto: "CONTENT_TYPE_SAVE_REACTION"),
    6: .same(proto: "CONTENT_TYPE_SAVE_READ_RECEIPT"),
    7: .same(proto: "CONTENT_TYPE_SAVE_REPLY"),
    8: .same(proto: "CONTENT_TYPE_SAVE_ATTACHMENT"),
    9: .same(proto: "CONTENT_TYPE_SAVE_REMOTE_ATTACHMENT"),
    10: .same(proto: "CONTENT_TYPE_SAVE_TRANSACTION_REFERENCE"),
  ]
}

extension Xmtp_DeviceSync_MessageBackup_GroupMessageSave: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupMessageSave"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "decrypted_message_bytes"),
    4: .standard(proto: "sent_at_ns"),
    5: .same(proto: "kind"),
    6: .standard(proto: "sender_installation_id"),
    7: .standard(proto: "sender_inbox_id"),
    8: .standard(proto: "delivery_status"),
    9: .standard(proto: "content_type"),
    10: .standard(proto: "version_major"),
    11: .standard(proto: "version_minor"),
    12: .standard(proto: "authority_id"),
    13: .standard(proto: "reference_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.groupID) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.decryptedMessageBytes) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.sentAtNs) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.kind) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.senderInstallationID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.senderInboxID) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.deliveryStatus) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.contentType) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.versionMajor) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.versionMinor) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.authorityID) }()
      case 13: try { try decoder.decodeSingularBytesField(value: &self._referenceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularBytesField(value: self.groupID, fieldNumber: 2)
    }
    if !self.decryptedMessageBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.decryptedMessageBytes, fieldNumber: 3)
    }
    if self.sentAtNs != 0 {
      try visitor.visitSingularInt64Field(value: self.sentAtNs, fieldNumber: 4)
    }
    if self.kind != .unspecified {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 5)
    }
    if !self.senderInstallationID.isEmpty {
      try visitor.visitSingularBytesField(value: self.senderInstallationID, fieldNumber: 6)
    }
    if !self.senderInboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.senderInboxID, fieldNumber: 7)
    }
    if self.deliveryStatus != .unspecified {
      try visitor.visitSingularEnumField(value: self.deliveryStatus, fieldNumber: 8)
    }
    if self.contentType != .unspecified {
      try visitor.visitSingularEnumField(value: self.contentType, fieldNumber: 9)
    }
    if self.versionMajor != 0 {
      try visitor.visitSingularInt32Field(value: self.versionMajor, fieldNumber: 10)
    }
    if self.versionMinor != 0 {
      try visitor.visitSingularInt32Field(value: self.versionMinor, fieldNumber: 11)
    }
    if !self.authorityID.isEmpty {
      try visitor.visitSingularStringField(value: self.authorityID, fieldNumber: 12)
    }
    try { if let v = self._referenceID {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 13)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_DeviceSync_MessageBackup_GroupMessageSave, rhs: Xmtp_DeviceSync_MessageBackup_GroupMessageSave) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.decryptedMessageBytes != rhs.decryptedMessageBytes {return false}
    if lhs.sentAtNs != rhs.sentAtNs {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs.senderInstallationID != rhs.senderInstallationID {return false}
    if lhs.senderInboxID != rhs.senderInboxID {return false}
    if lhs.deliveryStatus != rhs.deliveryStatus {return false}
    if lhs.contentType != rhs.contentType {return false}
    if lhs.versionMajor != rhs.versionMajor {return false}
    if lhs.versionMinor != rhs.versionMinor {return false}
    if lhs.authorityID != rhs.authorityID {return false}
    if lhs._referenceID != rhs._referenceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
